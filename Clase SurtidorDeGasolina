import java.util.ArrayList;
import java.util.List;

public class SurtidorDeGasolina {
    private static final double PRECIO_POR_GALON = 15540.0;
    private String nombreEstacion;
    private String nit;
    private String ciudad;

    private double totalDineroIngresado;
    private int totalGalonesVendidos;
    private int totalVehiculosAtendidos;

    private List<Factura> facturas;

    public SurtidorDeGasolina(String nombreEstacion, String nit, String ciudad) {
        this.nombreEstacion = nombreEstacion;
        this.nit = nit;
        this.ciudad = ciudad;
        this.totalDineroIngresado = 0;
        this.totalGalonesVendidos = 0;
        this.totalVehiculosAtendidos = 0;
        this.facturas = new ArrayList<>();
    }

    public void cargarGasolina(Vehiculo vehiculo, double dinero, boolean llenoTotal, String formaDePago) {
        int capacidadDisponible = vehiculo.getCapacidadMaximaGalones() - vehiculo.getGalonesActuales();
        double dineroUtilizado = 0;
        int galonesIngresados = 0;

        System.out.println("\n--- Iniciando carga de gasolina ---");
        if (llenoTotal) {
            while (galonesIngresados < capacidadDisponible) {
                galonesIngresados++;
                dineroUtilizado = galonesIngresados * PRECIO_POR_GALON;

                actualizarPantallas(galonesIngresados, dineroUtilizado);

                try {
                    Thread.sleep(500); // Simula tiempo de llenado
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        } else {
            int maxGalonesPorDinero = (int) (dinero / PRECIO_POR_GALON);
            while (galonesIngresados < maxGalonesPorDinero && galonesIngresados < capacidadDisponible) {
                galonesIngresados++;
                dineroUtilizado = galonesIngresados * PRECIO_POR_GALON;

                actualizarPantallas(galonesIngresados, dineroUtilizado);

                try {
                    Thread.sleep(500); // Simula tiempo de llenado
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        }

        vehiculo.setGalonesActuales(vehiculo.getGalonesActuales() + galonesIngresados);
        this.totalDineroIngresado += dineroUtilizado;
        this.totalGalonesVendidos += galonesIngresados;
        this.totalVehiculosAtendidos++;

        Factura factura = new Factura(nombreEstacion, nit, ciudad, vehiculo.getPlaca(), galonesIngresados, formaDePago, dineroUtilizado);
        facturas.add(factura);
        factura.imprimir();
    }

    private void actualizarPantallas(int galonesIngresados, double dineroUtilizado) {
        System.out.printf("Display 1 - Galones ingresados: %d\n", galonesIngresados);
        System.out.printf("Display 2 - Valor a pagar: $%.2f\n", dineroUtilizado);
    }

    public void mostrarEstadisticas() {
        System.out.println("\n--- Estadísticas del surtidor ---");
        System.out.println("Total galones vendidos: " + totalGalonesVendidos);
        System.out.println("Total dinero ingresado: $" + totalDineroIngresado);
        System.out.println("Total vehículos atendidos: " + totalVehiculosAtendidos);
    }
}
